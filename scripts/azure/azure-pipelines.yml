# Build & Deploy the AROS website
# to use, you must define the following secret variables
# in the pipeline settings -:
#    SF_RSYNC_USER - sourceforge user to upload as
#    SF_RSYNC_PASSWORD - ...

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
    AROSWEBSRCBUILDDIR:  '$(AROSDOCBUILDDIR)/web' # Location builds are done in
    AROSDOCSRCBUILDDIR:  '$(AROSDOCBUILDDIR)/html' # Location builds are done in
    AROSDOCBUILDDIR:  '$(AZBUILDPATH)/documentation'
    AZBUILDPATH: '$(Build.BinariesDirectory)' # workspace path
    AROSDOCSRCDIR: '$(system.defaultWorkingDirectory)' # Path to the source code
    SF_RSYNC_USER_AROS: "$(SF_RSYNC_USER),aros"

steps:
- task: DownloadSecureFile@1
  name: GetSSHKey
  inputs:
    secureFile: 'sf-azure-key'

- script: |
    echo "Setting up SSH key..."
    mkdir -p ~/.ssh
    cp "$(GetSSHKey.secureFilePath)" ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa
    chmod 700 ~/.ssh

    # Add SourceForge to known hosts (non-interactive SSH)
    ssh-keyscan -t rsa web.sourceforge.net >> ~/.ssh/known_hosts

    # Create SSH config for web.sourceforge.net
    echo "Host web.sourceforge.net" > ~/.ssh/config
    echo "    IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
    echo "    IdentitiesOnly yes" >> ~/.ssh/config
    echo "    StrictHostKeyChecking yes" >> ~/.ssh/config
    echo "    Port 22" >> ~/.ssh/config
    chmod 600 ~/.ssh/config

    echo "SSH key and config setup complete."
  displayName: 'Setup SSH Key and SSH Config for SourceForge'

- script: |
    sudo apt-key adv --keyserver packages.microsoft.com --recv-keys B02C46DF417A0893
    sudo add-apt-repository universe
    sudo apt-get update
    sudo apt-get install -y sshpass
    sudo apt install -y python3 python3-pil
  displayName: 'Installing documentation build dependencies'

- script: |
    echo "Using user: $(SF_RSYNC_USER_AROS)"
    mkdir -p '$(AROSDOCBUILDDIR)'
    git clone --depth 1 --recurse-submodules https://github.com/aros-development-team/AROS.git $(AROSDOCBUILDDIR)/
    mkdir -p '$(AROSWEBSRCBUILDDIR)'
    mkdir -p '$(AROSDOCSRCBUILDDIR)'
    BUILDDATE=$(date -u +'%Y%m%d')
    echo "##vso[task.setvariable variable=arosbuilddate]$BUILDDATE"
    echo "##vso[task.setvariable variable=arosbuildid]AROS-$BUILDDATE"
    echo "##vso[task.setvariable variable=AROSPACKAGEDIR]$(AROSDOCBUILDDIR)/AROS-$BUILDDATE-docs-html"
    echo '##vso[task.prependpath]$(AROSDOCBUILDDIR)'
    echo '##vso[task.prependpath]$(AROSWEBSRCBUILDDIR)'
    echo '##vso[task.prependpath]$(AROSDOCSRCBUILDDIR)'
    echo 'Copying sources to build directories...'
    cp -R $(AROSDOCSRCDIR)/* $(AROSWEBSRCBUILDDIR)/
    cp -R $(AROSDOCSRCDIR)/* $(AROSDOCSRCBUILDDIR)/
  displayName: 'Setup workspace'

- script: |
    echo "PATH=${PATH}"
    export ncpu=
    case '$(Agent.OS)' in
    'Linux')
      ncpu=$(nproc)
      ;;
    'Darwin')
      ncpu=$(sysctl -n hw.ncpu)
      ;;
    esac
    [[ -z "$ncpu" || $ncpu -le 0 ]] && ncpu=1
    echo "Found ${ncpu} cores"
    echo "##vso[task.setvariable variable=BUILDTHREADS;]$ncpu"
  displayName: 'Detecting number of build threads'

- script: |
    mkdir -p '$(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source'
    cp -r $(AROSDOCSRCDIR)/* $(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source/
    wget https://raw.githubusercontent.com/aros-development-team/AROS/master/LICENSE -P $(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source/
    wget https://raw.githubusercontent.com/aros-development-team/AROS/master/ACKNOWLEDGEMENTS -P $(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source/
    echo "Creating $(AROSBUILDID)-docs-source.tar.bz2"
    tar cjvf $(AROSBUILDID)-docs-source.tar.bz2 --exclude=.git $(AROSBUILDID)-docs-source
    md5sum $(AROSBUILDID)-docs-source.tar.bz2 >$(AROSBUILDID)-docs-source.tar.bz2.md5
    rm -Rf $(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source
  workingDirectory: '$(AROSDOCBUILDDIR)'
  displayName: 'Creating documentation source package'

- script: |
    mkdir -p '$(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Sources'
    cp $(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source.tar.bz2 $(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Sources/
    cp $(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-source.tar.bz2.md5 $(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Sources/
    
    echo "Deploying using SSH key..."
    rsync -avz -e ssh \
      "$(Build.BinariesDirectory)/Upload/" \
      "$(SF_RSYNC_USER_AROS)@web.sourceforge.net:uploads/nightly2/"
    
    rm -Rf "$(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Sources"
  displayName: 'Deploying documentation source package using SSH Key'

- script: |
    echo 'Generating autodocs...'
    ./build alldocs
    echo 'Calling build www...'
    ./build www
  workingDirectory: '$(AROSWEBSRCBUILDDIR)'
  displayName: 'Building website'

- script: |
    mkdir -p ~/.ssh

    # Clean logs
    rm -f "$(AROSDOCBUILDDIR)/rsync-directories.log" "$(AROSDOCBUILDDIR)/rsync-files.log"

    # Scan directory entries
    for entry in $(AROSDOCBUILDDIR)/bin/documentation/www/*; do
      if [ -d "$entry" ]; then
        echo "$entry" >> $(AROSDOCBUILDDIR)/rsync-directories.log
      elif [ -f "$entry" ]; then
        echo "$entry" >> $(AROSDOCBUILDDIR)/rsync-files.log
      fi
    done

    # Deploy directories
    if [ -f "$(AROSDOCBUILDDIR)/rsync-directories.log" ]; then
      echo "Deploying website directories using $(BUILDTHREADS) threads"
      sed -i 's|$(AROSDOCBUILDDIR)/bin/documentation/www/||g' $(AROSDOCBUILDDIR)/rsync-directories.log
      cd $(AROSDOCBUILDDIR)/bin/documentation/www
      cat $(AROSDOCBUILDDIR)/rsync-directories.log | parallel --will-cite -j $(BUILDTHREADS) \
        rsync -rciv -e ssh {} \
        "$(SF_RSYNC_USER_AROS)@web.sourceforge.net:/home/project-web/aros/htdocs/"
    fi

    # Deploy files
    if [ -f "$(AROSDOCBUILDDIR)/rsync-files.log" ]; then
      echo "Deploying website root files"
      sed -i 's|$(AROSDOCBUILDDIR)/bin/documentation/www/||g' $(AROSDOCBUILDDIR)/rsync-files.log
      cd $(AROSDOCBUILDDIR)/bin/documentation/www
      rsync -rciv -e ssh $(< $(AROSDOCBUILDDIR)/rsync-files.log) \
        "$(SF_RSYNC_USER_AROS)@web.sourceforge.net:/home/project-web/aros/htdocs/"
    fi
  displayName: 'Deploying website using SSH Key'

- script: |
    echo 'Generating autodocs...'
    ./build alldocs
    echo 'Calling build html...'
    ./build html
  workingDirectory: '$(AROSDOCSRCBUILDDIR)'
  displayName: 'Building docs-html package'

- script: |
    mkdir -p '$(AROSPACKAGEDIR)'
    cp -r $(AROSDOCBUILDDIR)/bin/documentation/html/* $(AROSPACKAGEDIR)/
    wget https://raw.githubusercontent.com/aros-development-team/AROS/master/LICENSE -P $(AROSPACKAGEDIR)/
    wget https://raw.githubusercontent.com/aros-development-team/AROS/master/ACKNOWLEDGEMENTS -P $(AROSPACKAGEDIR)/
    echo "Creating $(AROSBUILDID)-docs-html.tar.bz2"
    tar cjvf $(AROSBUILDID)-docs-html.tar.bz2 $(AROSBUILDID)-docs-html
    md5sum $(AROSBUILDID)-docs-html.tar.bz2 >$(AROSBUILDID)-docs-html.tar.bz2.md5
  workingDirectory: '$(AROSDOCBUILDDIR)'
  displayName: 'Creating docs-html package'

- script: |
    echo "Preparing upload directory..."
    mkdir -p '$(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Documentation'
    cp "$(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-html.tar.bz2" "$(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Documentation/"
    cp "$(AROSDOCBUILDDIR)/$(AROSBUILDID)-docs-html.tar.bz2.md5" "$(Build.BinariesDirectory)/Upload/$(arosbuilddate)/Documentation/"

    echo "Deploying docs-html package using SSH key..."
    rsync -avz -e ssh "$(Build.BinariesDirectory)/Upload/" "$(SF_RSYNC_USER_AROS)@web.sourceforge.net:uploads/nightly2/"
  displayName: 'Deploying docs-html package using SSH key'
  